.bashrc
.codeintel
.config
.gitconfig
.gitk

.gnome2
.gtk-bookmarks
.gtkrc-2.0
.gvfs

.local
.profile
.pypirc

.Skype
.vim
.vimrc



TODO Create and configure submodule git repo
### todo colocar cores nos logs
### fazer documentacao
### fazer texto de log final
### TODO Perguntar se quer varrer o home adicionando alguns arquivos/folders no repo


# COMMAND TO CREATE/UPDATE A FILE(S) THAT DETAILS A PROFILE DEPENDENCY LIST
# 	ppas
# 	oter repos
# COMMAND THAT APPLYES ANOTHER PROFILE DEPENDENCY LIST INTO THIS
# COMMAND TO MOVE A CONFIGURATION INTO REPO USING SYMLINK UTILS
# COMMAND THAT APPLIES CURRENT PROFILE FILES INTO CURR SYSTEM USING SYMLINK UTILS 
# COMMAND TO APPLY A HOST CONFIGURATION INTO THE CURRENT HOST > CHANGE PROFILE





# COMMAND THAT SYNCS OTHER FILES IN DATA

# COMMAND TO MAKE SNAPSHOT
# COMMAND TO REVERT SNAPSHOT
# COMMAND TO DESTROY SNAPSHOT
# COMMAND TO LIST SNAPSHOTS

# COMMAND TO TURN OFF MONITOR

# GIT_REPOSITORY_URL should be setg by param, keeping the curr as a default
# GIT_REPOSITORY_URL should be divided into two repositories, one for the configuration files and one for the script files.


# COMMAND TO SAVE INSTALLED PACKAGES INTO A FILE
# COMMAND TO APPLY PACKAGES FROM A FILE

# USE SPARKLESHARE OR UNISON OR RSYNC TO SYNC DATA FILES BETWEEN HOSTS > The more automatic the better
# CONFIGURE SHELL (bash or zsh)
#	Configure shell path
# 	Configure shell aliases, functions and other configurations

# Configure dropbox, google drive (insync), ...


### TODO VARRER PASTA DE ARQUIVOS DE CONFIGURAÇÃO VERIFICANDO LINK SIMBOLICO DE CADA UM
### TODO	VARREDURA DEVE IGNORAR PRE E POS PROCESSAMENTO
### TODO	NO LINK SIMBOLICO, AO SER CRIADO, TENTAR EXECUTAR PRE E POS PROCESSAMENTO
### TODO 		Change directory before and after scripts

